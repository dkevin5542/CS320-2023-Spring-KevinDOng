Test1 :
[opening assign04-01-test.sml]
[opening ./../MySolution/assign04-01.sml]
[opening ./../../../mysmlib/mysmlib-cls.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
type 'a optn = 'a option
exception ERROR320 of string optn
exception ConsMatch320
exception OptnSubscript320
exception ListSubscript320
val assert320 = fn : bool -> unit
val assert320_some = fn : bool * string -> unit
val abs_int = fn : int -> int
val pow_int_int = fn : int * int -> int
val char_of_digit = fn : int -> char
val print_int = fn : int -> unit
val print_char = fn : char -> unit
val list_is_nil = fn : 'a list -> bool
val list_is_cons = fn : 'a list -> bool
val list_unnil = fn : 'a list -> unit
val list_uncons = fn : 'a list -> 'a * 'a list
val optn_is_none = fn : 'a optn -> bool
val optn_is_some = fn : 'a optn -> bool
val optn_unnone = fn : 'a optn -> unit
val optn_unsome = fn : 'a optn -> 'a
val list_length = fn : 'a list -> int
val list_map = fn : 'a list * ('a -> 'b) -> 'b list
val list_filter = fn : 'a list * ('a -> bool) -> 'a list
val list_reduce_left = fn : 'a list * 'b * ('b * 'a -> 'b) -> 'b
val list_reduce_right = fn : 'a list * 'b * ('a * 'b -> 'b) -> 'b
val list_append = fn : 'a list * 'a list -> 'a list
val list_concat = fn : 'a list list -> 'a list
val list_extend = fn : 'a list * 'a -> 'a list
val list_foldleft = <hidden> : 'a list * 'b * ('b * 'a -> 'b) -> 'b
val list_foldright = <hidden> : 'a list * 'b * ('a * 'b -> 'b) -> 'b
val list_reverse = fn : 'a list -> 'a list
val list_rappend = fn : 'a list * 'a list -> 'a list
val list_forall = fn : 'a list * ('a -> bool) -> bool
val list_exists = fn : 'a list * ('a -> bool) -> bool
val list_foreach = fn : 'a list * ('a -> unit) -> unit
val int0_foreach = fn : int * (unit -> unit) -> unit
val int1_foreach = fn : int * (int -> unit) -> unit
val string_foreach = fn : string * (char -> unit) -> unit
val forall_to_foreach = fn
  : ('a * ('b -> bool) -> bool) -> 'a * ('b -> unit) -> unit
val foreach_to_forall = fn
  : ('a * ('b -> unit) -> unit) -> 'a * ('b -> bool) -> bool
val foreach_to_foldleft = fn
  : ('a * ('b -> unit) -> unit) -> 'a * 'c * ('c * 'b -> 'c) -> 'c
val foreach_to_length = fn : ('a * ('b -> unit) -> unit) -> 'a -> int
val foreach_to_get_at = fn : ('a * ('b -> unit) -> unit) -> 'a * int -> 'b
val foreach_to_listize = fn : ('a * ('b -> unit) -> unit) -> 'a -> 'b list
val foreach_to_rlistize = fn : ('a * ('b -> unit) -> unit) -> 'a -> 'b list
val foreach_to_map_list = fn
  : ('a * ('b -> unit) -> unit) -> 'a * ('b -> 'c) -> 'c list
val foreach_to_filter_list = fn
  : ('a * ('b -> unit) -> unit) -> 'a * ('b -> bool) -> 'b list
val int1_forall = fn : int * (int -> bool) -> bool
val string_forall = fn : string * (char -> bool) -> bool
val list_get_at = fn : 'a list * int -> 'a
val int1_listize = fn : int -> int list
val int1_rlistize = fn : int -> int list
val list_rlistize = fn : 'a list -> 'a list
val string_listize = fn : string -> char list
val string_rlistize = fn : string -> char list
val int1_map_list = fn : int * (int -> 'a) -> 'a list
val string_map_list = fn : string * (char -> 'a) -> 'a list
val int1_foldleft = fn : int * 'a * ('a * int -> 'a) -> 'a
val int1_foldright = fn : int * 'a * (int * 'a -> 'a) -> 'a
val list_foldleft = fn : 'a list * 'b * ('b * 'a -> 'b) -> 'b
val list_foldright = fn : 'a list * 'b * ('b * 'a -> 'b) -> 'b
val string_foldleft = fn : string * 'a * ('a * char -> 'a) -> 'a
val string_foldright = fn : string * 'a * (char * 'a -> 'a) -> 'a
val it = () : unit
val isPrime = fn : int -> bool
val it = () : unit
Assign04-01-test passed!
val it = () : unit

Test 3:
[opening assign04-03-test.sml]
[opening ./../MySolution/assign04-03.sml]
[opening ./../../../mysmlib/mysmlib-cls.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
type 'a optn = 'a option
exception ERROR320 of string optn
exception ConsMatch320
exception OptnSubscript320
exception ListSubscript320
val assert320 = fn : bool -> unit
val assert320_some = fn : bool * string -> unit
val abs_int = fn : int -> int
val pow_int_int = fn : int * int -> int
val char_of_digit = fn : int -> char
val print_int = fn : int -> unit
val print_char = fn : char -> unit
val list_is_nil = fn : 'a list -> bool
val list_is_cons = fn : 'a list -> bool
val list_unnil = fn : 'a list -> unit
val list_uncons = fn : 'a list -> 'a * 'a list
val optn_is_none = fn : 'a optn -> bool
val optn_is_some = fn : 'a optn -> bool
val optn_unnone = fn : 'a optn -> unit
val optn_unsome = fn : 'a optn -> 'a
val list_length = fn : 'a list -> int
val list_map = fn : 'a list * ('a -> 'b) -> 'b list
val list_filter = fn : 'a list * ('a -> bool) -> 'a list
val list_reduce_left = fn : 'a list * 'b * ('b * 'a -> 'b) -> 'b
val list_reduce_right = fn : 'a list * 'b * ('a * 'b -> 'b) -> 'b
val list_append = fn : 'a list * 'a list -> 'a list
val list_concat = fn : 'a list list -> 'a list
val list_extend = fn : 'a list * 'a -> 'a list
val list_foldleft = <hidden> : 'a list * 'b * ('b * 'a -> 'b) -> 'b
val list_foldright = <hidden> : 'a list * 'b * ('a * 'b -> 'b) -> 'b
val list_reverse = fn : 'a list -> 'a list
val list_rappend = fn : 'a list * 'a list -> 'a list
val list_forall = fn : 'a list * ('a -> bool) -> bool
val list_exists = fn : 'a list * ('a -> bool) -> bool
val list_foreach = fn : 'a list * ('a -> unit) -> unit
val int0_foreach = fn : int * (unit -> unit) -> unit
val int1_foreach = fn : int * (int -> unit) -> unit
val string_foreach = fn : string * (char -> unit) -> unit
val forall_to_foreach = fn
  : ('a * ('b -> bool) -> bool) -> 'a * ('b -> unit) -> unit
val foreach_to_forall = fn
  : ('a * ('b -> unit) -> unit) -> 'a * ('b -> bool) -> bool
val foreach_to_foldleft = fn
  : ('a * ('b -> unit) -> unit) -> 'a * 'c * ('c * 'b -> 'c) -> 'c
val foreach_to_length = fn : ('a * ('b -> unit) -> unit) -> 'a -> int
val foreach_to_get_at = fn : ('a * ('b -> unit) -> unit) -> 'a * int -> 'b
val foreach_to_listize = fn : ('a * ('b -> unit) -> unit) -> 'a -> 'b list
val foreach_to_rlistize = fn : ('a * ('b -> unit) -> unit) -> 'a -> 'b list
val foreach_to_map_list = fn
  : ('a * ('b -> unit) -> unit) -> 'a * ('b -> 'c) -> 'c list
val foreach_to_filter_list = fn
  : ('a * ('b -> unit) -> unit) -> 'a * ('b -> bool) -> 'b list
val int1_forall = fn : int * (int -> bool) -> bool
val string_forall = fn : string * (char -> bool) -> bool
val list_get_at = fn : 'a list * int -> 'a
val int1_listize = fn : int -> int list
val int1_rlistize = fn : int -> int list
val list_rlistize = fn : 'a list -> 'a list
val string_listize = fn : string -> char list
val string_rlistize = fn : string -> char list
val int1_map_list = fn : int * (int -> 'a) -> 'a list
val string_map_list = fn : string * (char -> 'a) -> 'a list
val int1_foldleft = fn : int * 'a * ('a * int -> 'a) -> 'a
val int1_foldright = fn : int * 'a * (int * 'a -> 'a) -> 'a
val list_foldleft = fn : 'a list * 'b * ('b * 'a -> 'b) -> 'b
val list_foldright = fn : 'a list * 'b * ('b * 'a -> 'b) -> 'b
val string_foldleft = fn : string * 'a * ('a * char -> 'a) -> 'a
val string_foldright = fn : string * 'a * (char * 'a -> 'a) -> 'a
val it = () : unit
type ('a,'b) forall_t = 'a * ('b -> bool) -> bool
type ('a,'b) exists_t = 'a * ('b -> bool) -> bool
val forall_to_exists = fn : ('a,'b) exists_t -> 'a * ('b -> bool) -> bool
val it = () : unit
Assign04-03-test passed!
val power = fn : int * int -> int
val list_exists = fn : 'a list * ('a -> bool) -> bool
val list_forall' = fn : 'a list * ('a -> bool) -> bool
val list_exists' = fn : 'a list * ('a -> bool) -> bool
val xs = [1,2,3,4,5] : int list
val p1 = fn : int -> bool
val p2 = fn : int -> bool
val p3 = fn : int -> bool
val p4 = fn : int -> bool
val it = () : unit